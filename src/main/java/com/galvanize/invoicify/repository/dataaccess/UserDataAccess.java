package com.galvanize.invoicify.repository.dataaccess;


import com.galvanize.invoicify.models.User;
import com.galvanize.invoicify.repository.dataaccess.definition.IDataAccess;

import javax.persistence.*;
import java.util.function.Supplier;

/**
 * <h2>
 *     Spring bean Entity that manages the connection between the database and the Model.
 *     The UserDataAccess correpsonds to the User table in the database. It contains fields which
 *     directly express the columns directly in the table. UserDataAccess implements the IDataAccess Interface
 *     and inherits the methods: createDataAccess, convertToModel, convertToDataAccess; all of which wraps and unwraps
 *     the User model while restricting transaction to the database.
 * </h2>
 *
 * @field id -> Autogenerated serlization id when persisted to that database.
 * @field password -> String password that is stored in non-nullable user_name column of the user table.
 */

@Entity(name = "app_user")
public final class UserDataAccess implements IDataAccess<User> {

    // fields
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    public Long id;

    @Column(nullable = false)
    private String password;

    @Column(nullable = false, unique = true)
    private String username;

    // constructor/s

    public UserDataAccess(){}

    /**
     * <p>
     *     This constructor receives user input (String username, String password)
     *     and use it to initialize a newly created UserDataAccessObject before it is used.
     *     It cannot have a one arg constructor because the user_name column in the table cannot have null entries,
     *     therefore, there can only be a no args or all arg constructor.
     * </p>
     * @param username -> String username of the user that is assigned by the user when created and saved
     * @param password -> String password of the user that is assigned by the user when created and saved
     * */

    public UserDataAccess(String username, String password) {
        this.username = username;
        this.password = password;
    }



    // get & set

    /**
     *<p>
     *
     *</p>
     * @return id -> id stored in the user_id field.
     * */

    public Long getId() {
        return id;
    }

    public String getPassword() {
        return password;
    }

    public String getUsername() {
        return username;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    // method/s

    /**
     * */

    @Override
    public void createDataAccess(Object[] dbo) {

    }

    /**
     * <p>
     *     Converts a data access object to a model object
     * </p>
     * @param supplier: provides implementation of creating a model object.
     *                NOTE: the default state set in the supplier may/will be written over.
     * @param <M>: A model type used to create data access reflections
     * @return a User model object of the reflect data access definition
     */

    @Override
    public <M extends User> M convertToModel(Supplier<M> supplier) {
        final M user = supplier.get();

        user.setId(this.getId());
        user.setUsername(this.getUsername());

        return user;
    }

    /**
     *
     * @param
     * */

    @Override
    public <M extends User> void convertToDataAccess(M modelObject) {
        this.setId(modelObject.getId());
        this.setUsername(modelObject.getUsername());
    }

}
